@page "/SavedItems"
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext dbContext
<form method="post" asp-controller="Account" asp-action="UpdateDetailsInfo" enctype="multipart/form-data">
    <section id="account-details">
        <div class="container mt-5">
            <div class="main-info">
                <div class="images">
                    @if (user != null)
                    {
                        var imagePath = !string.IsNullOrEmpty(@user.ProfilePicture) ? user.ProfilePicture : "~/Images/ProfileImage/default-profile-image.jpg";
                        <img id="profileImg" class="profile-img" src="@imagePath" style="max-width: 130px; border-radius: 50%; overflow: hidden;" alt="@($"{@user.FirstName} {user.LastName}")" />
                    }
                    <img class="refresh-icon" src="~/images/icons/refresh-icon.svg" alt="Upload Photo" id="uploadImage" style="cursor: pointer;">
                    <input id="fileInput" asp-for="ProfileImage" type="file" class="form-control" style="display: none;">
                    <img id="myImg" style="max-width: 130px; border-radius: 50%; overflow: hidden;" />
                </div>
                <h5>@user.FirstName @user.LastName</h5>
                <p>@user.Email</p>
                <div class="buttons">
                    <span class="btn btn-theme"><i class="fa-light fa-gear"></i>Security </span>
                    <a class="btn-gray" asp-controller="Auth" asp-action="SignOut"><i class="fa-regular fa-user"></i><span>Sign out</span></a>
                </div>
            </div>
            <div class="row g-3 justify-content-md-center">
                <div class="courses-grid grid-12">
                    @foreach (var course in courses)
                    {
                        <article class="course-card">
                            <img class="course-img" src="~/Images/Courses/@course.CourseImagePath" alt="">
                            <button type="button" class="fa-regular fa-bookmark favorite" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Favorite"></button>
                            @if (course.IsBestseller)
                            {
                                <p class="best-seller text-s">Best Seller</p>
                            }

                            <div class="card-text">

                                <a href="/details/@course.Title"> <h5>@course.Title</h5></a>
                                <p class="text-s">by @course.Author</p>
                                <div class="d-flex">
                                    @if (course.DiscountPrice > 0)
                                    {
                                        <p class="text-lg text-danger">$ @course.DiscountPrice</p>
                                    }
                                    <p class="text-lg me-3 text-primary">$@course.OriginalPrice</p>

                                </div>
                                <hr>
                                <div class="card-info">
                                    <i class="fa-regular fa-clock">
                                        <p class="text-s">@course.Hours hours</p>
                                    </i>
                                    <i class="fa-regular fa-thumbs-up">
                                        @* <p class="text-s">@course.LikesInProcent% (@($"{course.LikesInNumbers / 1000}")K)</p> *@
                                    </i>
                                </div>
                            </div>
                        </article>
                    }
                </div>
            </div>

        </div>
    </section>
</form>

@code {
    private ApplicationUser user { get; set; }
    private List<Courses> courses = new List<Courses>();
    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }
    private async Task LoadCourses()
    {
        // courses = await dbContext.Courses.ToListAsync();
        // var httpClient = new HttpClient();
        // var response = await httpClient.GetAsync(AzureFunction.CourseProvider + "/Search?Search='" + Search + "'&Category='" + CategoryId + "'");
        // response.EnsureSuccessStatusCode();
        // courses = await response.Content.ReadFromJsonAsync<List<Courses>>();
        // StateHasChanged();
    }

    private async Task LoadData()
    {
        user = await dbContext.Users.FindAsync();
    }
}
